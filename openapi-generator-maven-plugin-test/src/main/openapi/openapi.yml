openapi: 3.0.0
info:
    
  version: '1.0-alpha'

  title: EGC API

  ## Note that description fields may use Common Markdown 
  ## (supported by OpenApi 3)
 
  description: | 
    # EGC API
    
    ## Design considerations
    
    ### Two-phase send
    
    Sending a new MSI is two-phase (create then send). This is
    because the msiId value is a critical piece of information
    for the client (to be able to check status and/or cancel)
    and the API design must ensure that the client is safely 
    in possession of msiID before a send happens. If the 
    method was one phase then there would be no guarantee that
    the msiID was received (a failure could happen in any link
    in the return snetworking chain like a router, firewall, proxy 
    server or indeed a problem at the client application end
    that prevented persistence of the msiID for later use).
    Moreover, if the method was one phase and a failure in the
    network chain occurred then not only would an orphan MSI 
    be sent by the provider but the client would not have
    knowledge that the MSI had been successfully queued for
    sending and would naturally retry the send (multiple times
    even) and we end up with the same MSI being sent 2+ times.
    
    To further clarify the problem being solved by a two phase
    send here is a [discussion](https://stackoverflow.com/questions/49444723/how-to-make-sure-the-http-response-was-delivered) 
    of the delivery guarantees of HTTP responses. 
    
    Note that a one phase call where the client generated a new 
    unique id (using a UUID for instance) is a possible solution 
    but is less desirable because it introduces a problematic 
    edge case where the client accidentally uses the same id more
    than once. If two different messages are sent with the same id
    (concurrently even) then the service should ensure that only 
    one message is accepted and that the service consumer is aware 
    that the other message failed. To do this demands coordination
    with a single transactional resource (like a relational database) which 
    also demands that that resource is highly available (relational 
    databases are often not great at that during upgrade cycles). There 
    are ways to get high availability (highly available cloud services like 
    DynamoDB and many more can offer conditional updates) but there is
    a much simpler way with two-phase. 
    
    If instead of the one-phase call the server creates the msiId and communicates 
    it to the client then the server side can potentially be scaled
    with ease if the msiID is a [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) 
    for instance (which is effectively unique without coordination
    with other nodes). 
    
    For example, a highly available and scalable 
    service could be constructed in AWS cloud using API Gateway with
    Lambda integrations that for the create message and send actions
    does this
    
      * **Create:** Generate a new UUID, place the message content and UUID on 
    to a queue for processing , return the UUID
      * **Send:** Place the UUID parameter on to a queue for processing
    
    A separate component then actions items on the queue(s). When both 
    the send and create messages have been read then an actual send can take 
    place. What is clear from this design is that many concurrent nodes could
    be receiving messages without coordinating with a central node/service 
    to ensure id uniqueness.
    
    Note also that to support two-phase send the status value of
     `CREATED` is included.
    
    ### Pagination
    
    The List MSIs action uses a paginated response as the number of 
    MSIs in a response can get large. Pagination can reduce server
    overhead and improve response times. Client-driven pagination is 
    where the client specifies an offset (skip) field and that number
    of rows is skipped by the server to return the next page. This
    can be inefficient for the server-side (see [discussion](
    https://use-the-index-luke.com/no-offset)) and it is preferred to 
    use server-driven pagination which is where each page returned 
    also includes a continuation token to be included in the next page 
    call. The nice thing about this approach is that the server side
    can simply return an offset in the continuation token if desired but 
    we enable more efficient techniques if wanted later.
    
    ### Client specific identifiers
    
    Early versions of this API have suggested the inclusion of a 
    `NationalSASId` field in the created MSI with the purpose of allowing 
    a client to correlate an MSI with its internal data. 
    
    This field is a convenience only and thus theoretically should not be
    included. A client should manage its correlations itself by storing the
    unique msiId returned by the service paired with its internal identifiers. 
    
    If something is required then it should be labelled something 
    like `tag` and have arbitrary values so that the client can use it for 
    anything. Labelling it `NationalSASId` suggests more meaning to the
    field than it may have. **TODO** confirm.
    
    ### Geometry
    
    Note that the api below allows for float precision locations for 
    geographic circles and rectangles. An implementation of this API 
    may choose to use the location with reduced precision (for example
    lat longs rounded to nearest integer).
    
    ### Cancellation
    
    A PUT to an `/msi/[id}` path ]with content like `{"isCancelled":true}` 
    has been suggested as a way of cancelling a broadcast. This can be 
    achieved in a much simpler way with the DELETE verb without content 
    (a cancel action can be considered as a logical delete in the context
    of this API). A cancelled broadcast cannot be changed in status but 
    can be queried. 
    
    ### Abstraction of C-Codes
    
    Initial proposals for the API suggested a partial abstraction of C-Codes. 
    In particular Priority, MsiType and AreaType were abstracted. This API 
    demonstrates a full abstraction of C-Codes. It is equivalent to C-Codes
    but has an easier to read and process representation and the mapping to C-Codes 
    then becomes a server-side implementation detail. By using the data modelling
    constructs of OpenAPI v3 and JSON Schema users can generate code for their 
    API-consuming application that imposes compile-time checking (varies on language)
    instead of experiencing runtime failures.
    
    **TODO** is there a requirement for full explicit C-Code support (zero 
    abstraction)?
    
    ### Auth
    
    Initial proposals for this API included a re-authenticate 
    method whereby a new token was returned if a currently valid token was 
    supplied. This is a security hole in that anyone in possession of one 
    valid token (but not the username and password) can stay authenticated 
    forever. In the same vein, a sensible limit on validity duration of a 
    token should be imposed so that a leaked token cannot be used for long. 
    Given the likely usage of the API (in terms of the number of calls made
    in a time interval by a client) there should be no significant performance
    penalty forcing a refresh of the token each hour (or even less).
    
    Bearer authentication is used ([RFC6750](https://www.rfc-editor.org/rfc/rfc6750.html#page-5)).
    Bearer authentication is carried in the `Authorization` request header in this format:
    
        Authorization: Bearer BASE64_ENCODED_TOKEN
    
    **TODO** The encoded content of the token is not defined (for example, JWT could be used)
    but is left to the implementer. Should the authentication flow follow an existing 
    standard like OAuth 2.0? 
    
    ### Naming
    Previous API drafts used the field names `startDate` and `endDate` for an MSI.
    Given that those fields refer to timestamps not just dates the names `startTime`
    and `endTime` have been used.
    
    ### Acknowledgments
    Iridium can at times provide receive and read acknowledgements. **TODO** get 
    better documentation of the capability and a proper specification for their
    response from a list acks call.
    
    ### Timings
    There may be use cases for the following additional fields on an MSI:
    
    * createdTime
    * cancelledTime
    
    A user could record in their own systems when they created or cancelled a broadcast 
    but it might help problem diagnosis if that information was together.
    
    **TODO** confirm
    
    It would also be useful in some circumstances for users to know exactly when a
    message was broadcast by satellite. Although messages may be scheduled for 
    immediate or later broadcast there may be significant delays till the broadcast
    occurs and the user should be able to see the actual broadcast times.
    
    **TODO** discuss with satellite providers
    
paths:

  /authenticate:

    ###############################################
    ## Authenticate
    ###############################################   
    post:
      summary: Authenticate
      description: |
        Obtains a token that will be passed in a request header to calls
        to other paths on this API for authentication and authorization
        purposes.
      requestBody:
        description: | 
          username and password
        required: true
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/AuthenticationRequestBody'
      responses:
        '200':    
          description: token and expiry time
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AuthenticationResponse' 
        '400':    
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '500':    
          $ref: '#/components/responses/ServerError'              
  
  /msi:
  
    ###############################################
    ## Create an MSI
    ###############################################      
    post:
      summary: Create MSI
      description: |
        Submits message content and returns a unique id (across all 
        users) that is to be used in the send method. It is ok for
        a message to never be sent but the provider should have the 
        freedom to clean up (delete) unsent messages after some 
        reasonable period or after more than N unsent messages are created.
        (**TODO** ask providers what is reasonable minimum period and 
        maximum number of unsent messages so it can be documented here). 
      requestBody:
        description: |
          Describes the message content
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MsiContent'
      responses:
        '200':    
          description: The unique identifier of the newly created MSI
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/MsiId' 
        '400':    
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403': 
          $ref: '#/components/responses/Forbidden'          
        '500':    
          $ref: '#/components/responses/ServerError'
      security: 
      - bearer: []
                
    ###############################################
    ## List MSIs
    ###############################################      
    get:
      summary: List MSIs
      description: |
        Returns Maritime Safety Information broadcasts requested to
        be sent by the user. 
        
        Note that none of the parameters are required. If no parameters
        are supplied then all MSIs for the current user will be returned
        (paged).
        
        The `limit` field may not be honoured exactly by the server
        side (in that it might exceed a maximum limit of the server).
        
        The results of this query may return in any order and that order
        may vary in repeated calls (for example, the returned MSIs *may* 
        not be ordered by timestamp). If the client requires an ordering
        by time then all pages should be requested and then sorted 
        client-side. **TODO** confirm expectations
      parameters:
        - in: query
          name: startTimeMin
          description: | 
            If startTimeMinInclusive is true (the default value if not specified)
            then filters MSIs on startTime >= startTimeMin.
            
            If startTimeMinInclusive is false then filters MSIs
            on startTime > startTimeMin.
          schema:
            type: string
            format: datetime
            example: '2022-04-20T18:25:43.511Z' 
        - in: query
          name: startTimeMinInclusive
          description: |
            If startTimeMinInclusive is true (the default value if not specified)
            then filters MSIs on startTime >= startTimeMin.
            
            If startTimeMinInclusive is false then filters MSIs
            on startTime > startTimeMin.
            
            If startTimeMinInclusive not specified then has no effect.
          schema:
            type: boolean
            default: true
            example: true
        - in: query
          name: startTimeMax
          description: |
            If startTimeMaxInclusive is true (the default value if not specified)
            then filters MSIs on startTime <= startTimeMax.
            
            If startTimeMaxInclusive is false then filters MSIs
            on startTime < startTimeMax.
          schema:
            type: string
            format: datetime
            example: '2022-04-24T23:25:43.511Z'
        - in: query
          name: startTimeMaxInclusive
          description: |
            If startTimeMaxInclusive is true (the default value if not specified)
            then filters MSIs on startTime <= startTimeMax.
            
            If startTimeMaxInclusive is false then filters MSIs
            on startTime < startTimeMax.
            
            If startTimeMaxInclusive not specified then has no effect.
          schema:
            type: boolean
            default: true
            example: true
        - in: query
          name: endTimeMin
          description: | 
            If endTimeMinInclusive is true (the default value if not specified)
            then filters MSIs on startTime >= startTimeMin.
            
            If startTimeMinInclusive is false then filters MSIs
            on startTime > startTimeMin.
          schema:
            type: string
            format: datetime
            example: '2022-04-21T18:25:43.511Z'
        - in: query
          name: endTimeMinInclusive
          description: |
            If endTimeMinInclusive is true (the default value if not specified)
            then filters MSIs on endTime >= endTimeMin.
            
            If endTimeMinInclusive is false then filters MSIs
            on endTime > endTimeMin.
            
            If endTimeMinInclusive not specified then has no effect.
          schema:
            type: boolean
            example: true 
        - in: query
          name: endTimeMax
          description: |
            If endTimeMaxInclusive is true (the default value if not specified)
            then filters MSIs on endTime <= endTimeMax.
            
            If endTimeMaxInclusive is false then filters MSIs
            on endTime < endTimeMax.
          schema:
            type: string
            format: datetime
            example: '2022-04-25T14:18:23.000Z'
        - in: query
          name: endTimeMaxInclusive
          description: |
            If endTimeMaxInclusive is true (the default value if not specified)
            then filters MSIs on endTime <= endTimeMax.
            
            If endTimeMaxInclusive is false then filters MSIs
            on endTime < endTimeMax.
            
            If endTimeMaxInclusive not specified then has no effect.
          schema:
            type: boolean
            default: true
            example: true             
        - in: query
          name: limit
          description: |
            Requests that at most `limit` MSIs are returned in the call.
            The server may cap the requested `limit` (fewer items may be
            returned). To request the next page available include the 
            returned `continuationToken` in the next call. If there are 
            no more items available then the response will not contain
            a `continuationToken`.
          schema:
            type: integer
            minimum: 1
            default: 10
        - in: query
          name: status
          description: |
            Only MSIs that have a status in the given list
            are returned. If the list is empty (or the parameter
            is not present) then no filtering on status occurs.
            **TODO** support multi-status filtering or just one?
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Status'
            example:
            - CREATED
            - CANCELLED
        - in: query
          name: broadcastType
          description: the type of broadcast
          schema:
            $ref: '#/components/schemas/BroadcastType' 
        - in: query
          name: continuationToken
          description: |
            Describes to the server the starting point of 
            the next page of results and is obtained from 
            the current page. May contain an offset if desired
            but is at the discretion of implementer. Note that
            it is possible that a call specifying a continuation
            token may return en empty list (but an empty list return 
            should not have a continuation token on it so at 
            that point paging would stop).
          schema:
            $ref: '#/components/schemas/ContinuationToken' 
        ## review other fields, acks etc.
      responses:
        '200':    
          description: OK
          content:
            application/json:
              schema:
                description: |
                  A list of MSIs and an optional continuation token (
                  to retrieve the next page of MSIs). If the list of
                  MSIs is empty there should be no continuation token. 
                type: object
                properties:
                  msis:
                    type: array
                    items: 
                      $ref: '#/components/schemas/Msi'
                  continuationToken:
                    $ref: '#/components/schemas/ContinuationToken'
                required: [msis]
        '400':    
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403': 
          $ref: '#/components/responses/Forbidden'          
        '500':    
          $ref: '#/components/responses/ServerError'
      security: 
      - bearer: []
                
  /msi/{id}:
    
    parameters:
      - $ref: '#/components/parameters/MsiId'
    
    ###############################################
    ## Get an MSI
    ############################################### 
    get:
      summary: Get MSI
      description: |
        Returns the details of an MSI broadcast using the unique MSI identifier.
      responses:
        '200':    
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Msi'
        '400':    
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403': 
          $ref: '#/components/responses/Forbidden'
        '500':    
          $ref: '#/components/responses/ServerError'
      security: 
      - bearer: []
      

    ###############################################
    ## Send an MSI
    ###############################################      
    put:
      summary: Send MSI
      description: |
        Requests that an existing unsent MSI be sent. If the MSI 
        has already been sent or the MSI has been cancelled then 
        nothing occurs (this method is idempotent). 
      responses:
        '200':    
          description: OK
        '400':    
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403': 
          $ref: '#/components/responses/Forbidden'          
        '500':    
          $ref: '#/components/responses/ServerError'
      security: 
      - bearer: []                        

    ###############################################
    ## Cancel an MSI
    ############################################### 
    delete:
      summary: Cancel MSI 
      description: |
        This is a logical delete of a broadcast in that it
        prevents future broadcasts happening for this msiId
        (be it a single or repeating broadcast). Once cancelled
        an MSI cannot be resent. However, the broadcast details 
        are still available to be queried.
      responses:
        '204':    
          description: OK (No Content)
        '400':    
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403': 
          $ref: '#/components/responses/Forbidden'          
        '500':    
          $ref: '#/components/responses/ServerError'       
      security: 
      - bearer: []
                                         
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      description: |
        As per RFC6750: `Authorization: Bearer BASE_64_ENCODED_TOKEN`
       
  parameters:
    MsiId:
      in: path
      name: id
      schema:
        $ref: '#/components/schemas/MsiId'
      description: unique msi identifier
      required: true
        
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    Unauthorized:
      description: Unauthorized (must authenticate)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    Forbidden:
      description: Not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
                                    
    ServerError:
      description: Unexpected error on the server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
                      
  schemas:
    Error:
      description: an error message (response)
      type: object
      properties:
        ## all properties optional
        errorMessage: 
          type: string
          example: an error occurred
        errorType:
          type: string
        stackTrace:
          type: array
          items: 
            type: string
        cause:
          $ref: '#/components/schemas/Error' 
      example:
        errorMessage: an error occurred
        errorType: SomethingWentWrongException

    AuthenticationRequestBody:
      description: |
        Holds the credentials and validity preference used to 
        create a token to be passed as a request header in calls
        to the API
      type: object
      properties:
        username:
          type: string
          minLength: 1
          example: myrcc
        password:
          type: string
          minLength: 1
          example: a-nice-strong-password
        validityMinutes:
          description: | 
            The duration in minutes that the token will be valid, 
            capped by the maximum allowed server-decided duration.  
            If not supplied (this parameter is optional) then the
            server default will be applied. Either way the response
            from this method supplies the expiry time for the
            token. The token should be refreshed before the expiry 
            time to avoid auth related failures.
          type: integer
          minimum: 1
          example: 60
      required: [username, password]
      example:
        username: myrcc
        password: a-nice-strong-password
        validityMinutes: 60
        
    AuthenticationResponse:
      type: object
      properties:
        token: 
          type: string
          minLength: 1
          example: '1/mZ1edKKACtPAb7zGlwSzvs72PvhAbGmB8K1ZrGxpcNM'
        expiryTime:
          type: string
          format: datetime
          description: |
            An expiryTime should always accompany the token
            because a requested validity duration may be 
            capped by the server and the client needs to know 
            what the resultant expiry time was.
          example: '2022-04-23T18:25:43.511Z'
      required: [token, expiryTime]
        
    MsiId:
      type: string
      minLength: 1
      maxLength: 255
      example: 289ee192-fdf5-4070-befc-3bf7291c1386
      
    SARPriority:
      type: string
      enum: [SAFETY, URGENCY, DISTRESS]
      example: SAFETY
    
    NonSARPriority:
      type: string
      enum: [SAFETY, URGENCY]
      example: URGENCY
      
    Status:
      type: string
      enum: [CREATED, SCHEDULED, ACTIVE, FINISHED, CANCELLED]
      example: ACTIVE
      
    BroadcastType:
      type: string
      enum: [SARBroadcast, MetBroadcast, NavBroadcast, PiracyBroadcast]
      example: SARBroadcast
      
    Payload:
      description: |
        the ASCII message text to broadcast. **TODO** what max length is appropriate?
      type: string
      minLength: 1
      maxLength: 65535 ## TODO what max length is appropriate?
      example: a message to be broadcast 

    Latitude:
      type: number
      format: float
      minimum: -90
      maximum: 90
      example: -45.5
      
    Longitude:
      type: number
      format: float
      minimum: -180
      maximum: 180
      example: 145.44
      
    Circle:
      type: object
      properties:
        geometryType:
          description: |
            Including the geometry type in the JSON is helpful
            in that a human viewer doesn't have to infer the 
            geometry type from the presence of the radiusNm field. 
          type: string
          enum: [Circle]
        lat:
          $ref: '#/components/schemas/Latitude' 
        lon:
          $ref: '#/components/schemas/Longitude' 
        radiusNm:
          type: number
          format: float
      required: [lat, lon, radiusNm]
      
    Rectangle:
      type: object
      properties: 
        geometryType:
          description: |
            Including the geometry type in the JSON is helpful
            in that a human viewer doesn't have to infer the 
            geometry type from the presence of extent fields.
          type: string
          enum: [Rectangle]
        minLat: 
          $ref: '#/components/schemas/Latitude'
        leftLon: 
          $ref: '#/components/schemas/Longitude' 
        heightDegrees:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          maximum: 180
        widthDegrees:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          maximum: 360
      required: [minLat, leftLon, heightDegrees, widthDegrees]
                
    Geometry:
      oneOf:
      - $ref: '#/components/schemas/Rectangle'
      - $ref: '#/components/schemas/Circle'
      example:
        geometryType: Circle
        lat: -42.5
        lon: 135.884
        radiusNm: 100.5
        
    Broadcast:
      description: the details of the broadcast particular to the broadcast type
      oneOf:
      - $ref: '#/components/schemas/SARBroadcast'
      - $ref: '#/components/schemas/MetBroadcast'
      - $ref: '#/components/schemas/NavBroadcast'
      - $ref: '#/components/schemas/PiracyBroadcast'
      example:
        geometry: 
          geometryType: Circle
          lat: -34.5
          lon: 145.44
          radiusNm: 150
        priority: SAFETY
                
    MsiContent:
      type: object
      description: |
        Used to create a new MSI. `repetition` is optional. If omitted
        once only is assumed (no repetition). `startTime` and
        `endTime` are optional fields and 0, 1 or both can be
        present.
      properties:
        broadcast:
          $ref: '#/components/schemas/Broadcast'
        startTime:
          type: string
          format: datetime
          description: the scheduled time of the initial broadcast
          example: '2022-04-23T10:30:43.511Z'
        endTime:
          type: string
          format: datetime
          description: |
            the time after which no more broadcasts should be made
            of this MSI 
          example: '2022-04-24T10:25:43.511Z'
        payload: 
          $ref: '#/components/schemas/Payload'          
        repetition:
          $ref: '#/components/schemas/Repetition'
        readAcksEnabled:
          description: |
            If the satellite provider supports read acknowledgements then setting this 
            field to true will enable acknowledgements to the satellite provider
            that the message has been read by the receiving vessel.
          type: boolean
          example: false
        receiveAcksEnabled:
          description: |
            If the satellite provider supports receive acknowledgements then setting this 
            field to true will enable acknowledgements to the satellite provider
            that the message has been received by the vessel.
          type: boolean
          example: false 
      ## repetition is optional
      required: [broadcast, payload]
        
    Msi:
      type: object
      description: |
        Represents a created MMSI (with an identifier).
        
        `repetition` is optional. If omitted once only is assumed
        (no repetition). `startTime` and `endTime`
        are optional fields and 0, 1 or both can be present.
      properties:
        id: 
          $ref: '#/components/schemas/MsiId'
        broadcast:
          $ref: '#/components/schemas/Broadcast'
        createdTime:
          type: string
          format: datetime
          description: |
            when the MSI was created
          example: '2022-04-23T10:25:43.511Z'
        cancelledTime:
          type: string
          format: datetime
          description: |
            when the MSI was cancelled. This field should be set
            if the status is CANCELLED.
          example: '2022-04-24T13:28:43.511Z'
        startTime:
          type: string
          format: datetime
          description: |
            Start time of the broadcast schedule
          example: '2022-04-23T10:30:43.511Z'
        endTime:
          type: string
          format: datetime
          description: |
            End time of the broadcast schedule
          example: '2022-04-24T10:25:43.511Z'
        payload: 
          $ref: '#/components/schemas/Payload'
        status:
          $ref: '#/components/schemas/Status'   
        repetition:
          $ref: '#/components/schemas/Repetition'
        readAcksEnabled:
          description: |
            If the satellite provider supports read acknowledgements then setting this 
            field to true will enable acknowledgements to the satellite provider
            that the message has been read by the receiving vessel.
          type: boolean
          example: false
        receiveAcksEnabled:
          description: |
            If the satellite provider supports receive acknowledgements then setting this 
            field to true will enable acknowledgements to the satellite provider
            that the message has been received by the vessel.
          type: boolean
          example: false 
      ## repetition is optional
      required: [id, broadcast, createdTime, startTime, endTime, status]
        
    SARBroadcast:
      type: object
      description: |
        area is optional. If omitted then corresponds to the
        entire coverage area.
      properties: 
        geometry:
          $ref: '#/components/schemas/SARBroadcastArea'
        priority:
          $ref: '#/components/schemas/SARPriority'
      required: [priority]
          
    SARBroadcastArea:
      oneOf:
      - $ref: '#/components/schemas/Geometry'
      - $ref: '#/components/schemas/NavArea'
         
    MetBroadcast:
      type: object
      properties:
        area:
          $ref: '#/components/schemas/MetBroadcastArea' 
        priority:
          $ref: '#/components/schemas/NonSARPriority'
      required: [area]
      
    MetBroadcastArea:
      oneOf:
      - $ref: '#/components/schemas/Geometry'
      - $ref: '#/components/schemas/MetArea'
      - $ref: '#/components/schemas/CoastalWarningArea'
        
    NavBroadcast:
      type: object
      properties:
        area:
          $ref: '#/components/schemas/NavOrPiracyBroadcastArea' 
        priority:
          $ref: '#/components/schemas/NonSARPriority'
      required: [area]    
      
    PiracyBroadcast:
      type: object
      properties:
        area:
          $ref: '#/components/schemas/NavOrPiracyBroadcastArea' 
        priority:
          $ref: '#/components/schemas/NonSARPriority'
      required: [area]    
        
    NavOrPiracyBroadcastArea:
      oneOf:
      - $ref: '#/components/schemas/Geometry'
      - $ref: '#/components/schemas/NavArea'
      - $ref: '#/components/schemas/CoastalWarningArea'
              
    NavArea:
      properties: 
        navAreaCode:
          $ref: '#/components/schemas/NavAreaCode'
      required: [navAreaCode] 
          
    NavAreaCode:
      type: integer
      minimum: 1
      maximum: 21
          
    MetArea:
      properties: 
        metAreaCode:
          type: integer
          minimum: 1
          maximum: 21
      required: [metAreaCode]
          
    CoastalWarningArea:
      properties: 
        subjectIndicator:
          $ref: '#/components/schemas/SubjectIndicator'          
        navAreaCode:
          $ref: '#/components/schemas/NavAreaCode'
        coastalWarningAreaCode:
          type: string
          pattern: '[a-zA-Z]'
      required: [subjectIndicator, navAreaCode, coastalWarningAreaCode]
          
    SubjectIndicator:
      type: string
      enum: 
      - NAVIGATIONAL_WARNINGS
      - METEOROLOGICAL_WARNINGS
      - ICE_REPORTS
      - SAR_INFO_AND_PIRACY_WARNINGS
      - METEOROLOGICAL_FORECASTS
      - NOT_USED
      - SATNAV_MESSAGES
      - OTHER_ELECTRONIC_NAVAID_MESSAGES
      - OTHER_NAVIGATIONAL_WARNINGS
      - PILOT_SERVICE_MESSAGES
      - AIS
      - LORAN_MESSAGES
      - SPECIAL_SERVICES_V
      - SPECIAL_SERVICES_W
      - SPECIAL_SERVICES_X
      - SPECIAL_SERVICES_Y
      - NO_MESSAGES_ON_HAND
      description: |
        Subject indicator associated with a Coastal Warning
                    
    Repetition:
      type: object
      properties:
        repeatTillCancelled: 
          type: boolean
          description: |
            if false then one repetition is made (that
            is the broadcast happens twice)
        intervalHours: 
          type: integer
          enum: [1,2,3,4,5,6,12,18,24,30,36,48,60,72,96,120]  
          description: |
            the time gap between broadcasts of the same MSI   
      required: [repeatTillCancelled, intervalHours] 
      
    ContinuationToken:
      type: string
      minLength: 1
      maxLength: 4096
      description: |
        Indicates to the server the starting point of the next page 
        of results. The token is not expected to be anywhere near as
        long as 4096 characters but good to put an upper bound on it. 
      example: 10
            
    Nested:
      type: object
      properties:
        first: 
          type: object
          properties: 
            first2: 
              type: object
              properties:
                first3: 
                  type: string
            second2:
              type: array
              items: 
                type: object
                properties:
                  partNumber: 
                    type: integer
                    format: int32
                required: [partNumber]
        second:
          type: string
          
    Thing:
      oneOf:
      - $ref: '#/components/schemas/ThingMember1'
      - $ref: '#/components/schemas/ThingMember2'
      
    ThingMember1:
      type: object
      properties:
        name:
          type: string
      required: [name]
      
    ThingMember2:
      type: integer
      format: int32
    
    Thing2:
      type: object
      properties:
        stuff:
          oneOf:
          - type: string
          - type: integer
            format: int32          

    Simple:
      type: string
      
    SimpleWithConstraints:
      type: string
      minLength: 4
      maxLength: 255
      pattern: '[a-b0-9]*'
      
      
    ArraySimple:
      type: array
      items:
        type: integer
        format: int32
        
        
    ArrayComplex:
      type: array
      items: 
        type: object
        properties:
          firstName: 
            type: string
          secondName:
            type: string
        required: [firstName]
     
 
      
    SimpleLong:
      type: integer
      format: int64
      
    SimpleInt:
      type: integer
      format: int32
      
    SimpleInteger:
      type: integer
      
    SimpleFloat:
      type: number
      format: float
      
    SimpleDouble:
      type: number
      format: double
      
    SimpleString:
      type: string
      
    SimpleDateTime:
      type: string
      format: date-time
      
    SimpleBoolean:
      type: boolean
      
    SimpleByteArray:
      type: string
      format: byte
      
    SimpleBinary:
      type: string
      format: binary
      
    SimpleIntegerArray:
      type: array
      items: 
        type: integer
        
    ArrayOfComplexType:
      type: array
      items: 
        type: object
        properties:
          name:
            type: string
        required: [name]
        
    ArrayOfOneOf:
      type: array
      items:
        oneOf:
        - type: boolean
        - type: integer 
          format: int32

    ArrayOfOneOfString:
      type: array
      items:
        oneOf:
        - type: string
        - type: integer 
          format: int32
          
    ObjectAllOptionalFields:
      type: object
      properties:
        str: 
          type: string
        num:
          type: integer
          format: int32         